{"version":3,"sources":["components/Video/Embed.js","components/Video/Icon.js","components/Video/Video.js","components/List/Card.js","components/List/List.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Embed","props","useEffect","require","script","container","document","getElementById","tweetId","window","twttr","widgets","createTweet","align","lang","then","el","style","width","sroot","shadowRoot","querySelector","maxWidth","thumbnail","cloneNode","card","firstChild","appendChild","textElem","text","childNodes","n","nodeName","nodeValue","lastChild","textContent","tweetSet","console","log","className","display","id","Icon","name","class","join","onClick","action","i","Video","DI","displayIndex","dataList","slice","max","map","item","index","displayBack","displayForward","backList","Card","List","useState","saveDI","setSaveDI","listWidth","clientWidth","cardHeight","clientHeight","scrollTo","Header","App","setDisplayIndex","setDataList","loadCount","setLoadCount","length","axios","get","res","data","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b592573.chunk.js","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\r\nimport \"./Embed.scss\";\r\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\r\n\r\nconst Embed = (props) => {\r\n\r\n    const tweetSet = () => {\r\n        var container = document.getElementById('tweet-' + props.tweetId);\r\n        window.twttr.widgets.createTweet(\r\n            props.tweetId,// ツイートID\r\n            container,\r\n            {\r\n                align: \"center\",\r\n                lang: \"ja\",\r\n            }).then(el => {\r\n            el.style.width = \"auto\";\r\n            let sroot = el.shadowRoot;\r\n\r\n            let embeddedTweet = sroot.querySelector('.EmbeddedTweet');\r\n            embeddedTweet.style.maxWidth = \"100%\";\r\n\r\n            let thumbnail = sroot.querySelector('.NaturalImage-image').cloneNode(true);\r\n            let card = document.getElementById('img-' + props.tweetId);\r\n            card.firstChild.appendChild(thumbnail);\r\n\r\n            let textElem = sroot.querySelector('.Tweet-text');\r\n            let text = '';\r\n            for (let n of textElem.childNodes) {\r\n                if (n.nodeName == '#text') {\r\n                    text = text + n.nodeValue\r\n                }\r\n            }\r\n            card.lastChild.textContent = text;\r\n        });\r\n    };\r\n\r\n    useEffect( () => {\r\n        let script = require('scriptjs');\r\n        script('https://platform.twitter.com/widgets.js', () => {\r\n        tweetSet()\r\n        });\r\n        console.log('twi')\r\n    }, []);\r\n\r\n    return (\r\n        <div className={'tweet-container'} style={{ display: props.display }}>\r\n            <div id={'tweet-' + props.tweetId}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Embed;","import React, {useState, useEffect} from \"react\";\r\n\r\nconst Icon = props => {\r\n\r\n    return (\r\n        <div\r\n            className={[props.name, props.class].join(' ')}\r\n            onClick={() => props.action()}\r\n        >\r\n            <i className={props.i}></i>\r\n            {props.text}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Icon;","import React, {useState, useEffect} from \"react\";\r\nimport './Video.scss'\r\nimport Embed from \"./Embed\";\r\nimport Icon from \"./Icon\";\r\n\r\nconst Video = props => {\r\n\r\n    const DI = props.displayIndex;\r\n\r\n    return (\r\n        <div className={'main'}>\r\n            {props.dataList.slice(0,props.max).map((item, index) => (\r\n                <Embed\r\n                    tweetId={item['tweet_id']}\r\n                    display={DI == index ? \"block\" : \"none\"}\r\n                />\r\n            ))}\r\n            <div className={'icon'}  style={{ display: DI == -1 ? \"none\": \"\" }}>\r\n                <Icon name={'left'} i={'fas fa-arrow-alt-circle-left'} action={() => props.action.displayBack()} class={ DI == 0 ? \"hide\": \"\" }/>\r\n                <Icon name={'right'} i={'fas fas fa-arrow-alt-circle-right'} action={() => props.action.displayForward()} class={ DI == props.max - 1 ? \"hide\": \"\" }/>\r\n                <Icon name={'back-list'} i={'fas fa-angle-double-left'} text={'リストにもどる'} action={() => props.action.backList()}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Video;","import React, { useEffect, useState, Fragment } from 'react';\r\nimport \"./Card.scss\";\r\nimport { TwitterTweetEmbed, TwitterVideoEmbed } from \"react-twitter-embed\";\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className={\"card\"} id={\"img-\" + props.tweetId} >\r\n            <div className={\"imgWrapper\"}></div>\r\n            <p className={'text'}></p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React, {useState, useEffect} from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst List = props => {\r\n\r\n    const DI = props.displayIndex;\r\n\r\n    const [saveDI, setSaveDI] = useState(-1);\r\n\r\n    const clickAction = (i) => {\r\n        props.action(i)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (DI == -1 && document.querySelector('.card-container')) {\r\n            const listWidth = document.querySelector('.list').clientWidth;\r\n            const cardHeight = document.querySelector('.card-container').clientHeight;\r\n            if (listWidth == 1800) {\r\n                window.scrollTo(0,(cardHeight*(saveDI-4))/4);\r\n            } else\r\n            if (listWidth <= 1350 && listWidth > 882) {\r\n                window.scrollTo(0,(cardHeight*(saveDI-3))/3);\r\n            } else\r\n            if (listWidth <= 882) {\r\n                window.scrollTo(0,(cardHeight*(saveDI-2))/2);\r\n            }\r\n        } else {\r\n            setSaveDI(DI)\r\n        }\r\n\r\n    }, [DI]);\r\n\r\n    return (\r\n        <div className={'list'} style={{ display: DI == -1 ? \"\": \"none\" }}>\r\n            {props.dataList.slice(0,props.max).map((item, index) => (\r\n                <div className={'card-container'} onClick={() => clickAction(index)}>\r\n                    <Card tweetId={item['tweet_id']} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default List","import React from \"react\";\r\nimport './Header.scss'\r\n\r\nconst Header = props => {\r\n    return (\r\n        // <div className={'header'}>\r\n            <h1 className={'title'} style={{display: props.displayIndex == -1 ? \"\": \"none\" }}>Splatter</h1>\r\n        // </div>\r\n    )\r\n};\r\n\r\nexport default Header","import React, {useEffect, useState} from 'react';\nimport './App.scss';\nimport axios from 'axios';\nimport Video from \"./components/Video/Video\";\nimport List from \"./components/List/List\";\nimport Header from \"./components/Header\";\nimport Icon from \"./components/Video/Icon\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst App = () => {\n\n    const [displayIndex, setDisplayIndex] = useState(-1);\n\n    const [dataList, setDataList] = useState([]);\n\n    const [loadCount, setLoadCount] = useState(1);\n\n    const loadMax = 40;\n    let max = dataList.length < loadMax*loadCount ? dataList.length: loadMax*loadCount;\n\n    const selectDisplay = index => {\n        setDisplayIndex(index)\n    };\n\n    const displayBack = () => {\n        setDisplayIndex(displayIndex - 1)\n    };\n\n    const displayForward = () => {\n        setDisplayIndex(displayIndex + 1)\n    };\n\n    const backList = () => {\n        setDisplayIndex(-1)\n    };\n\n    const loadMore = () => {\n        setLoadCount(loadCount + 1)\n    };\n\n    const getAPI = () => {\n        axios\n            .get('http://localhost:8000/api')\n            .then(res => {\n                setDataList(res.data)\n            })\n    };\n\n    useEffect(() => {\n        getAPI()\n    },[]);\n\n    return (\n    <div className={'app'}>\n        <Header displayIndex={displayIndex}/>\n\n        <Video\n            dataList={dataList}\n            displayIndex={displayIndex}\n            action={{\n                displayBack: () => displayBack(),\n                displayForward: () => displayForward(),\n                backList: () => backList(),\n            }}\n            max={max}\n        />\n\n        <List\n            dataList={dataList}\n            displayIndex={displayIndex}\n            action={(i) => selectDisplay(i)}\n            max={max}\n        />\n\n        { max != dataList.length && <Icon name={'load'} i={'fas fa-plus-circle'} action={() => loadMore()} class={ displayIndex == -1 ? \"\": \"hide\" } />}\n\n    </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}